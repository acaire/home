#! /usr/bin/env python
from __future__ import print_function
from os.path import expanduser
from subprocess import check_call
import arrow
import ConfigParser
import argparse
import boto.ec2
import boto.ec2.autoscale
import boto.ec2.elb
import os
import re
import shlex
import sys


def stderr(*objs):
    print(*objs, file=sys.stderr)


def get_instances(region, tags, tag_value):
    filters = []
    all_instances = []
    for tag in tags:
        filters.append({"tag:%s" % (tag): tag_value})

    for ec2_filter in filters:
        reservations = ec2_conn.get_all_instances(filters=ec2_filter)
        all_instances += [i for r in reservations for i in r.instances]
    return all_instances


def get_role_names(region,
                   tags):
    filters = []
    all_role_names = []
    for tag in tags:
        filters.append({'tag-key': tag, 'resource-type': 'instance'})
    for ec2_filter in filters:
        ec2_conn = boto.ec2.connect_to_region(region)
        tags = ec2_conn.get_all_tags(filters=ec2_filter)
        all_role_names += [str(t.value) for t in tags]
    return sorted(list(set(all_role_names)))

default_region_env = os.environ.get('AWS_DEFAULT_REGION')

config = ConfigParser.SafeConfigParser()
if default_region_env:
    config.set('DEFAULT', 'region', default_region_env)
else:
    config.set('DEFAULT', 'region', 'ap-southeast-2')
config.set('DEFAULT', 'role_tag', 'role')
config.set('DEFAULT', 'host_script', '/usr/local/bin/csshX')
config.read("%s/.awstools.conf" % (expanduser("~")))

parser = argparse.ArgumentParser()
parser.add_argument("-R", "--get-roles",
                    dest="get_roles",
                    default=False,
                    action='store_true',
                    help="Get a list of roles in the region")
parser.add_argument("-r", "--region",
                    dest="region",
                    default=config.get('DEFAULT', 'region'),
                    help="EC2 region instances are located in")
parser.add_argument("-t", "--tag",
                    dest="tag", default=config.get('DEFAULT', 'role_tag'),
                    help="The AWS tag name to search for instances with")
parser.add_argument("-s", "--script_mode",
                    action='store_true',
                    default=False,
                    help="Output in script friendly mode "
                    "(IP address list only)")
parser.add_argument("-S", "--script_run_mode",
                    action='store_true',
                    default=False,
                    help="Output in script friendly mode and runs "
                         "host_script in config. Defaults to csshx")
parser.add_argument("--host_script",
                    dest="host_script",
                    default=config.get('DEFAULT', 'host_script'),
                    help="Script to run against lists of hosts when using -S")
parser.add_argument("role_name", default="", nargs='*')

args = parser.parse_args()

region = args.region

if args.tag.find(',') >= 0:
    tag = args.tag.split(',')
else:
    tag = [args.tag]

script_mode = args.script_mode or args.script_run_mode
script_run_mode = args.script_run_mode
host_script = args.host_script
filters = []
all_instances = []
asgs = []

ec2_conn = boto.ec2.connect_to_region(region)
as_conn = boto.ec2.autoscale.connect_to_region(region)
elb_conn = boto.ec2.elb.connect_to_region(region)

if args.get_roles:
    role_list = get_role_names(region, tag)
    for role in role_list:
        print(role)
    exit(0)
else:
    if not args.role_name:
        stderr("Error: Must provide a role name to search for")
        parser.print_help()
        exit(1)

for role in args.role_name:
    all_instances += get_instances(region, tag, role)

if not script_mode:
    print("Region: %s" % (region))
    print("Hosts with tag: %s:%s" % (tag, args.role_name))

instance_health = {}
elb_states = {}

for instance in sorted(all_instances,
                       key=lambda x: x.launch_time,
                       reverse=False):
    if script_mode:
        # print just ip addresses
        if instance.private_ip_address is not None:
            print(instance.private_ip_address)
        elif instance.ip_address is not None:
            print(instance.ip_address)
    else:
        # Determine instance status based on state
        # and time.  So we print either when it was launched
        # Or how long ago it's state changed
        state = instance.state
        if instance.state_reason:
            if instance.reason:
                m = re.search(r'(.*)?\((.*)\)$', instance.reason)
                reason_txt, reason_time = m.groups()
                reason_time = arrow.get(reason_time).humanize()
                status = reason_txt + reason_time
            else:
                status = instance.state_reason['message']

        else:
            status = arrow.get(instance.launch_time).humanize()

        if 'aws:autoscaling:groupName' in instance.tags:
            if not instance.tags['aws:autoscaling:groupName'] in asgs:
                elbs = as_conn.get_all_groups(names=[instance.tags['aws:autoscaling:groupName']])[0].load_balancers
                for i in elbs:
                    balancer = elb_conn.get_all_load_balancers(load_balancer_names=[i])[0]
                    elb_health = balancer.get_instance_health()
                    for e in elb_health:
                        if e.instance_id not in elb_states:
                            elb_states[str(e.instance_id)] = []
                        elb_states[str(e.instance_id)].append(str(e.state))
                asgs.append(instance.tags['aws:autoscaling:groupName'])

        # collate ip addresses
        ips = [instance.private_ip_address, instance.ip_address]
        ips = ','.join(x for x in ips if x)

        # grab relative launch time
        launch_time = arrow.get(instance.launch_time)

        print("%s" % (instance.tags['Name']
                      if 'Name' in instance.tags
                      else '<NONAME>'),
              instance.id,
              " %s" % ips if len(ips) == 12 else "%s" % ips,
              instance.instance_type,
              state,
              status,
              elb_states[str(instance.id)] if instance.id in elb_states else '')

if script_run_mode:
    hosts_with_ips = (ip for ip in all_instances
                      if ip.private_ip_address is not None)
    ip_string = str(" ".join([instance.private_ip_address
                    for ip in hosts_with_ips]))
    check_call(shlex.split(host_script + " " + ip_string))
